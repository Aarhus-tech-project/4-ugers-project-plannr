// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Plannr.Api.Data;

#nullable disable

namespace Plannr.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251029123459_UpdateEventTheme")]
    partial class UpdateEventTheme
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventPageSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventPageSection");

                    b.HasDiscriminator<string>("SectionType").HasValue("EventPageSection");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Plannr.Api.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessLink")
                        .HasColumnType("text");

                    b.Property<bool>("AllDay")
                        .HasColumnType("boolean");

                    b.Property<int>("CheckedInCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("GoingCount")
                        .HasColumnType("integer");

                    b.Property<int>("InterestedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RequiredAge")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StartAt");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Plannr.Api.Models.EventImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("Plannr.Api.Models.EventPrompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventPrompts");
                });

            modelBuilder.Entity("Plannr.Api.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Bio")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("DescriptionSection", b =>
                {
                    b.HasBaseType("EventPageSection");

                    b.HasDiscriminator().HasValue("description");
                });

            modelBuilder.Entity("LocationSection", b =>
                {
                    b.HasBaseType("EventPageSection");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("location");
                });

            modelBuilder.Entity("EventPageSection", b =>
                {
                    b.HasOne("Plannr.Api.Models.Event", null)
                        .WithMany("Sections")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plannr.Api.Models.Event", b =>
                {
                    b.HasOne("Plannr.Api.Models.Profile", "Creator")
                        .WithMany("EventsCreated")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("EventTheme", "Theme", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Icon")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("Plannr.Api.Models.EventLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("numeric(9,6)");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("numeric(9,6)");

                            b1.HasKey("EventId");

                            b1.ToTable("EventLocations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Location");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Plannr.Api.Models.EventImage", b =>
                {
                    b.HasOne("Plannr.Api.Models.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Plannr.Api.Models.EventPrompt", b =>
                {
                    b.HasOne("Plannr.Api.Models.Event", "Event")
                        .WithMany("Prompts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Plannr.Api.Models.Event", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Prompts");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Plannr.Api.Models.Profile", b =>
                {
                    b.Navigation("EventsCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
